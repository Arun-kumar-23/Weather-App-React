{"version":3,"sources":["app_component/Weather.component.jsx","app_component/form.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","className","style","fontSize","city","weatherIcon","temp_celsius","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","min","max","error","role","Form","onSubmit","loadweather","width","display","flexDirection","alignItems","justifyContent","flexWrap","textAlign","type","placeholder","name","autoComplete","App","getWeather","e","a","preventDefault","console","log","target","elements","value","fetch","api_call","json","response","setState","calCelsius","main","temp","weather","get_WeatherIcon","id","state","undefined","country","icon","Thunderstrom","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeId","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2701fa28.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Weather = props => {\n  return (\n    <div className=\"container text-light my-5\" >\n      <div className=\"Card\">\n        <h1 className=\"text-white py-3\" style={{fontSize:\"36px\"}}>{props.city}</h1>\n        <h5 className=\"py-4\">\n          <i className={`wi ${props.weatherIcon} display-1`}/>\n        </h5>\n\n        {/* Get Celsius */}\n        {props.temp_celsius ? (\n          <h1 className=\"py-2\" style={{fontSize:\"36px\"}}>{props.temp_celsius}&deg;</h1>\n        ) : null}\n\n        {/* show max and min temp */}\n        {maxminTemp(props.temp_min, props.temp_max)}\n\n        {/* Weather description */}\n        <h4 className=\"py-3\"style={{fontSize:\"36px\"}}>\n          {props.description.charAt(0).toUpperCase() +\n            props.description.slice(1)}\n        </h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Weather;\n\nfunction maxminTemp(min, max) {\n  if (max && min) {\n    return (\n      <h3 style={{fontSize:\"36px\"}}>\n        <span className=\"px-4\">{min}&deg;</span>\n        <span className=\"px-4\">{max}&deg;</span>\n      </h3>\n    );\n  }\n}","import React from \"react\";\nimport \"./form.style.css\";\n\nconst Form = props => {\n  return (\n      <form onSubmit={props.loadweather}style={{width:\"calc(100vw - scrollbarWidth)\"}}>\n        <div>{props.error ? error() : \"\"}</div>\n        <div className=\"\"style={{display:\"flex\", flexDirection:\"row\", alignItems:\"center\", justifyContent:\"center\", flexWrap:\"wrap\"}} >\n          {/* <div className=\" \"> */}\n            <input style={{width:\"70%\", textAlign:\"center\", fontSize:\"24px\"}}\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"City\"\n              name=\"city\"\n              autoComplete=\"off\"\n            />\n          {/* </div> */}\n          \n          \n        </div>\n      </form>\n  );\n};\n\nconst error = props => {\n  return (\n    <div className=\"alert alert-danger mx-5\" role=\"alert\">\n      Please Enter City and Country...!\n    </div>\n  );\n};\n\nexport default Form;","import React from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport \"weather-icons/css/weather-icons.css\"\n\nimport Weather from './app_component/Weather.component'\nimport Form from './app_component/form.component'\n\nconst API_key=\"1df7ba320f755f403c83d0f941e3b71d\"\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      city: undefined,\n      country: undefined,\n      main: undefined,\n      icon:undefined,\n      temp_celsius: undefined,\n      temp_min: undefined,\n      temp_max: undefined,\n      description: '',\n      error: false\n    }\n\n    this.weatherIcon={\n      Thunderstrom:\"wi-thunderstrom\",\n      Drizzle: \"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n  \n  calCelsius(temp){\n    let cels = Math.floor(temp-273.15)\n    return cels\n  }\n\n  get_WeatherIcon(icons, rangeId){\n    console.log(icons)\n    switch(true){\n      case rangeId >=200 && rangeId <=232:\n        this.setState({icon: icons.Thunderstrom})\n        break\n\n      case rangeId >=300 && rangeId <=321:\n        this.setState({icon: icons.Drizzle})\n          break\n\n      case rangeId >=500 && rangeId <=531:\n        this.setState({icon: icons.Rain})\n        break\n\n      case rangeId >=600 && rangeId <=622:\n        this.setState({icon: icons.Snow})\n        break\n      \n      case rangeId >=701 && rangeId <=781:\n        this.setState({icon: icons.Atmosphere})\n        break\n\n      case rangeId === 800:\n        this.setState({icon: icons.Clear})\n        break\n\n      case rangeId >=800 && rangeId <=804:\n        this.setState({icon: icons.Clouds})\n        break\n\n      default:\n        this.setState({icon: icons.Clouds})  \n    }\n\n    \n  }\n    getWeather = async (e)=>{\n      e.preventDefault()\n      console.log(e.target.elements.city.value)\n      const city = e.target.elements.city.value\n\n\n    \n      // console.log(city)\n      \n\n      if(city){\n        const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_key}`)\n\n        const response = await api_call.json()\n  \n        console.log(response)\n        \n        this.setState({\n          city: response.name,\n          temp_celsius: this.calCelsius(response.main.temp),\n          temp_min: this.calCelsius(response.main.temp_min),\n          temp_max: this.calCelsius(response.main.temp_max),\n          description: response.weather[0].description,\n        })\n        this.get_WeatherIcon(this.weatherIcon, response.weather[0].id)\n      }else {\n        this.setState({error:true})\n      }\n        \n    }\n  \n  \n  render() {\n    return (\n        <div className=\"App\">\n          <Form loadweather={this.getWeather} error={this.state.error}/>\n          <Weather  city={this.state.city} \n                    country={this.state.country} \n                    temp_celsius={this.state.temp_celsius} \n                    temp_min={this.state.temp_min} \n                    temp_max={this.state.temp_max} \n                    description={this.state.description} \n                    weatherIcon = {this.state.icon}/>\n    \n        </div>\n      );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}